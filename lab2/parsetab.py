
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "right=ASSIGNADDASSIGNSUBASSIGNMULASSIGNDIVleft<>EQNEQLEQGEQleft+-leftDOTADDDOTSUBleft*/leftDOTMULDOTDIVright'ASSIGNADD ASSIGNDIV ASSIGNMUL ASSIGNSUB BREAK CONTINUE DOTADD DOTDIV DOTMUL DOTSUB ELSE EQ EYE FLOATNUM FOR GEQ ID IF INTNUM LEQ NEQ ONES PRINT RETURN STRING WHILE ZEROSm_expr : expression\n              | expression m_exprexpression : c_block\n                  | base_expr\n                  | base_expr ';'\n                  | if_st\n                  | loop_st base_expr : assignment\n              | return\n              | print operation : number\n                 | unary_operation\n                 | functionc_block : '{' m_expr '}'print : PRINT print_b print_b : STRING\n               | operation\n               | print_b ',' operationreturn : RETURN condition\n              | RETURN operation\n              | RETURNarray : '[' array_b ']'array_b : number\n               | array_b ',' number\n               | epsmatrix : '[' matrix_b ']'matrix_b : array\n                | matrix_b ',' array\n                | epsnumber : INTNUM\n              | FLOATNUM\n              | IDrange : ID '[' int_variable ',' int_variable ']'int_variable : INTNUM\n                    | IDfunction : function_n '(' number ')'function_n : ONES\n                | EYE\n                | ZEROScondition : compareloop_st : while\n              | forwhile : WHILE '(' condition ')' loop_bfor : FOR ID '=' int_variable ':' int_variable loop_bloop_b : loop_expr\n              | loop_expr ';'\n              | '{' m_loop_expr '}'loop_expr : base_expr\n                 | loop_st\n                 | if_loop_st\n                 | BREAK\n                 | CONTINUEm_loop_expr : m_loop_expr loop_b\n                   | loop_bif_st : IF '(' condition ')' expression else_stelse_st : ELSE expression\n               | epsif_loop_st : IF '(' condition ')' loop_b else_loop_stelse_loop_st : ELSE loop_b\n                    | epseps : assign_expr : ID\n                   | rangeassignment : assign_expr '=' matrix\n                  | assign_expr '=' STRING\n                  | assign_expr '=' operation\n                  | assign_expr ASSIGNADD operation\n                  | assign_expr ASSIGNSUB operation\n                  | assign_expr ASSIGNMUL operation\n                  | assign_expr ASSIGNDIV operationunary_operation : negation\n                      | transposenegation : '-' numbertranspose : ID '\\'' operation : operation '+' operation\n                 | operation '-' operation\n                 | operation DOTADD operation\n                 | operation DOTSUB operation\n                 | operation '*' operation\n                 | operation '/' operation\n                 | operation DOTMUL operation\n                 | operation DOTDIV operation\n                 | '(' operation ')'compare : operation '<' operation\n               | operation '>' operation\n               | operation EQ operation\n               | operation NEQ operation\n               | operation GEQ operation\n               | operation LEQ operation"
    
_lr_action_items = {'{':([0,2,3,4,5,6,7,8,9,10,12,13,15,22,30,31,32,33,34,35,38,39,40,41,42,47,48,49,53,56,57,58,60,61,62,63,78,79,81,86,88,89,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,114,118,120,121,122,123,124,125,126,127,128,132,133,134,138,139,140,142,144,146,147,149,150,151,152,153,154,155,],[7,7,-3,-4,-6,-7,7,-8,-9,-10,-41,-42,-21,-5,-19,-20,-40,-11,-12,-13,-30,-31,-32,-71,-72,-15,-16,-17,-14,-64,-65,-66,-67,-68,-69,-70,-73,-32,-74,-35,-34,7,-75,-76,-77,-78,-79,-80,-81,-82,-84,-85,-86,-87,-88,-89,-83,-18,123,-61,-26,-36,-43,-45,123,-48,-49,-50,-51,-52,-55,7,-57,-46,123,-54,123,-56,-47,-53,-44,123,-61,-58,123,-60,-59,]),'IF':([0,2,3,4,5,6,7,8,9,10,12,13,15,22,30,31,32,33,34,35,38,39,40,41,42,47,48,49,53,56,57,58,60,61,62,63,78,79,81,86,88,89,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,114,118,120,121,122,123,124,125,126,127,128,132,133,134,138,139,140,142,144,146,147,149,150,151,152,153,154,155,],[11,11,-3,-4,-6,-7,11,-8,-9,-10,-41,-42,-21,-5,-19,-20,-40,-11,-12,-13,-30,-31,-32,-71,-72,-15,-16,-17,-14,-64,-65,-66,-67,-68,-69,-70,-73,-32,-74,-35,-34,11,-75,-76,-77,-78,-79,-80,-81,-82,-84,-85,-86,-87,-88,-89,-83,-18,129,-61,-26,-36,-43,-45,129,-48,-49,-50,-51,-52,-55,11,-57,-46,129,-54,129,-56,-47,-53,-44,129,-61,-58,129,-60,-59,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,12,13,15,22,30,31,32,33,34,35,38,39,40,41,42,47,48,49,53,56,57,58,60,61,62,63,78,79,81,86,88,89,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,114,118,120,121,122,123,124,125,126,127,128,132,133,134,138,139,140,142,144,146,147,149,150,151,152,153,154,155,],[15,15,-3,-4,-6,-7,15,-8,-9,-10,-41,-42,-21,-5,-19,-20,-40,-11,-12,-13,-30,-31,-32,-71,-72,-15,-16,-17,-14,-64,-65,-66,-67,-68,-69,-70,-73,-32,-74,-35,-34,15,-75,-76,-77,-78,-79,-80,-81,-82,-84,-85,-86,-87,-88,-89,-83,-18,15,-61,-26,-36,-43,-45,15,-48,-49,-50,-51,-52,-55,15,-57,-46,15,-54,15,-56,-47,-53,-44,15,-61,-58,15,-60,-59,]),'PRINT':([0,2,3,4,5,6,7,8,9,10,12,13,15,22,30,31,32,33,34,35,38,39,40,41,42,47,48,49,53,56,57,58,60,61,62,63,78,79,81,86,88,89,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,114,118,120,121,122,123,124,125,126,127,128,132,133,134,138,139,140,142,144,146,147,149,150,151,152,153,154,155,],[16,16,-3,-4,-6,-7,16,-8,-9,-10,-41,-42,-21,-5,-19,-20,-40,-11,-12,-13,-30,-31,-32,-71,-72,-15,-16,-17,-14,-64,-65,-66,-67,-68,-69,-70,-73,-32,-74,-35,-34,16,-75,-76,-77,-78,-79,-80,-81,-82,-84,-85,-86,-87,-88,-89,-83,-18,16,-61,-26,-36,-43,-45,16,-48,-49,-50,-51,-52,-55,16,-57,-46,16,-54,16,-56,-47,-53,-44,16,-61,-58,16,-60,-59,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,12,13,15,22,30,31,32,33,34,35,38,39,40,41,42,47,48,49,53,56,57,58,60,61,62,63,78,79,81,86,88,89,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,114,118,120,121,122,123,124,125,126,127,128,132,133,134,138,139,140,142,144,146,147,149,150,151,152,153,154,155,],[17,17,-3,-4,-6,-7,17,-8,-9,-10,-41,-42,-21,-5,-19,-20,-40,-11,-12,-13,-30,-31,-32,-71,-72,-15,-16,-17,-14,-64,-65,-66,-67,-68,-69,-70,-73,-32,-74,-35,-34,17,-75,-76,-77,-78,-79,-80,-81,-82,-84,-85,-86,-87,-88,-89,-83,-18,17,-61,-26,-36,-43,-45,17,-48,-49,-50,-51,-52,-55,17,-57,-46,17,-54,17,-56,-47,-53,-44,17,-61,-58,17,-60,-59,]),'FOR':([0,2,3,4,5,6,7,8,9,10,12,13,15,22,30,31,32,33,34,35,38,39,40,41,42,47,48,49,53,56,57,58,60,61,62,63,78,79,81,86,88,89,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,114,118,120,121,122,123,124,125,126,127,128,132,133,134,138,139,140,142,144,146,147,149,150,151,152,153,154,155,],[18,18,-3,-4,-6,-7,18,-8,-9,-10,-41,-42,-21,-5,-19,-20,-40,-11,-12,-13,-30,-31,-32,-71,-72,-15,-16,-17,-14,-64,-65,-66,-67,-68,-69,-70,-73,-32,-74,-35,-34,18,-75,-76,-77,-78,-79,-80,-81,-82,-84,-85,-86,-87,-88,-89,-83,-18,18,-61,-26,-36,-43,-45,18,-48,-49,-50,-51,-52,-55,18,-57,-46,18,-54,18,-56,-47,-53,-44,18,-61,-58,18,-60,-59,]),'ID':([0,2,3,4,5,6,7,8,9,10,12,13,15,16,18,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,47,48,49,50,52,53,56,57,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,82,83,85,86,88,89,90,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,113,114,118,120,121,122,123,124,125,126,127,128,130,132,133,134,136,138,139,140,141,142,144,146,147,149,150,151,152,153,154,155,],[19,19,-3,-4,-6,-7,19,-8,-9,-10,-41,-42,40,40,51,-5,40,40,40,40,40,40,-19,-20,-40,-11,-12,-13,79,40,-30,-31,-32,-71,-72,-15,-16,-17,40,86,-14,-64,-65,-66,-67,-68,-69,-70,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-73,-32,-74,79,40,86,-35,-34,19,79,-75,-76,-77,-78,-79,-80,-81,-82,-84,-85,-86,-87,-88,-89,-83,-18,19,86,-61,-26,-36,-43,-45,19,-48,-49,-50,-51,-52,86,-55,19,-57,79,-46,19,-54,40,19,-56,-47,-53,-44,19,-61,-58,19,-60,-59,]),'$end':([1,2,3,4,5,6,8,9,10,12,13,15,21,22,30,31,32,33,34,35,38,39,40,41,42,47,48,49,53,56,57,58,60,61,62,63,78,79,81,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,114,118,120,121,122,124,125,126,127,128,132,134,138,144,146,149,151,152,154,155,],[0,-1,-3,-4,-6,-7,-8,-9,-10,-41,-42,-21,-2,-5,-19,-20,-40,-11,-12,-13,-30,-31,-32,-71,-72,-15,-16,-17,-14,-64,-65,-66,-67,-68,-69,-70,-73,-32,-74,-75,-76,-77,-78,-79,-80,-81,-82,-84,-85,-86,-87,-88,-89,-83,-18,-61,-26,-36,-43,-45,-48,-49,-50,-51,-52,-55,-57,-46,-56,-47,-44,-61,-58,-60,-59,]),'}':([2,3,4,5,6,8,9,10,12,13,15,21,22,23,30,31,32,33,34,35,38,39,40,41,42,47,48,49,53,56,57,58,60,61,62,63,78,79,81,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,114,118,120,121,122,124,125,126,127,128,132,134,138,139,140,144,146,147,149,151,152,154,155,],[-1,-3,-4,-6,-7,-8,-9,-10,-41,-42,-21,-2,-5,53,-19,-20,-40,-11,-12,-13,-30,-31,-32,-71,-72,-15,-16,-17,-14,-64,-65,-66,-67,-68,-69,-70,-73,-32,-74,-75,-76,-77,-78,-79,-80,-81,-82,-84,-85,-86,-87,-88,-89,-83,-18,-61,-26,-36,-43,-45,-48,-49,-50,-51,-52,-55,-57,-46,146,-54,-56,-47,-53,-44,-61,-58,-60,-59,]),'ELSE':([3,4,5,6,8,9,10,12,13,15,22,30,31,32,33,34,35,38,39,40,41,42,47,48,49,53,56,57,58,60,61,62,63,78,79,81,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,114,118,120,121,122,124,125,126,127,128,132,134,138,144,146,149,151,152,154,155,],[-3,-4,-6,-7,-8,-9,-10,-41,-42,-21,-5,-19,-20,-40,-11,-12,-13,-30,-31,-32,-71,-72,-15,-16,-17,-14,-64,-65,-66,-67,-68,-69,-70,-73,-32,-74,-75,-76,-77,-78,-79,-80,-81,-82,-84,-85,-86,-87,-88,-89,-83,-18,133,-26,-36,-43,-45,-48,-49,-50,-51,-52,-55,-57,-46,-56,-47,-44,153,-58,-60,-59,]),';':([4,8,9,10,12,13,15,30,31,32,33,34,35,38,39,40,41,42,47,48,49,56,57,58,60,61,62,63,78,79,81,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,118,120,121,122,124,125,126,127,128,138,146,149,151,152,154,155,],[22,-8,-9,-10,-41,-42,-21,-19,-20,-40,-11,-12,-13,-30,-31,-32,-71,-72,-15,-16,-17,-64,-65,-66,-67,-68,-69,-70,-73,-32,-74,-75,-76,-77,-78,-79,-80,-81,-82,-84,-85,-86,-87,-88,-89,-83,-18,-26,-36,-43,138,-48,-49,-50,-51,-52,-46,-47,-44,-61,-58,-60,-59,]),'BREAK':([8,9,10,12,13,15,30,31,32,33,34,35,38,39,40,41,42,47,48,49,56,57,58,60,61,62,63,78,79,81,86,88,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,118,120,121,122,123,124,125,126,127,128,138,139,140,142,146,147,149,150,151,152,153,154,155,],[-8,-9,-10,-41,-42,-21,-19,-20,-40,-11,-12,-13,-30,-31,-32,-71,-72,-15,-16,-17,-64,-65,-66,-67,-68,-69,-70,-73,-32,-74,-35,-34,-75,-76,-77,-78,-79,-80,-81,-82,-84,-85,-86,-87,-88,-89,-83,-18,127,-26,-36,-43,-45,127,-48,-49,-50,-51,-52,-46,127,-54,127,-47,-53,-44,127,-61,-58,127,-60,-59,]),'CONTINUE':([8,9,10,12,13,15,30,31,32,33,34,35,38,39,40,41,42,47,48,49,56,57,58,60,61,62,63,78,79,81,86,88,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,118,120,121,122,123,124,125,126,127,128,138,139,140,142,146,147,149,150,151,152,153,154,155,],[-8,-9,-10,-41,-42,-21,-19,-20,-40,-11,-12,-13,-30,-31,-32,-71,-72,-15,-16,-17,-64,-65,-66,-67,-68,-69,-70,-73,-32,-74,-35,-34,-75,-76,-77,-78,-79,-80,-81,-82,-84,-85,-86,-87,-88,-89,-83,-18,128,-26,-36,-43,-45,128,-48,-49,-50,-51,-52,-46,128,-54,128,-47,-53,-44,128,-61,-58,128,-60,-59,]),'(':([11,15,16,17,24,25,26,27,28,29,37,43,44,45,46,50,64,65,66,67,68,69,70,71,72,73,74,75,76,77,83,129,141,],[24,37,37,50,37,37,37,37,37,37,37,82,-37,-38,-39,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,141,37,]),'=':([14,19,20,51,143,],[25,-62,-63,85,-33,]),'ASSIGNADD':([14,19,20,143,],[26,-62,-63,-33,]),'ASSIGNSUB':([14,19,20,143,],[27,-62,-63,-33,]),'ASSIGNMUL':([14,19,20,143,],[28,-62,-63,-33,]),'ASSIGNDIV':([14,19,20,143,],[29,-62,-63,-33,]),'INTNUM':([15,16,24,25,26,27,28,29,36,37,50,52,64,65,66,67,68,69,70,71,72,73,74,75,76,77,82,83,85,90,113,130,136,141,],[38,38,38,38,38,38,38,38,38,38,38,88,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,88,38,88,88,38,38,]),'FLOATNUM':([15,16,24,25,26,27,28,29,36,37,50,64,65,66,67,68,69,70,71,72,73,74,75,76,77,82,83,90,136,141,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'-':([15,16,24,25,26,27,28,29,31,33,34,35,37,38,39,40,41,42,49,50,55,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,120,141,],[36,36,36,36,36,36,36,36,65,-11,-12,-13,36,-30,-31,-32,-71,-72,65,36,65,65,65,65,65,65,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-73,-32,65,-74,36,-75,-76,-77,-78,-79,-80,-81,-82,65,65,65,65,65,65,-83,65,-36,36,]),'ONES':([15,16,24,25,26,27,28,29,37,50,64,65,66,67,68,69,70,71,72,73,74,75,76,77,83,141,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'EYE':([15,16,24,25,26,27,28,29,37,50,64,65,66,67,68,69,70,71,72,73,74,75,76,77,83,141,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'ZEROS':([15,16,24,25,26,27,28,29,37,50,64,65,66,67,68,69,70,71,72,73,74,75,76,77,83,141,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'STRING':([16,25,],[48,57,]),'[':([19,25,59,119,],[52,59,90,90,]),'+':([31,33,34,35,38,39,40,41,42,49,55,58,60,61,62,63,78,79,80,81,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,120,],[64,-11,-12,-13,-30,-31,-32,-71,-72,64,64,64,64,64,64,64,-73,-32,64,-74,-75,-76,-77,-78,-79,-80,-81,-82,64,64,64,64,64,64,-83,64,-36,]),'DOTADD':([31,33,34,35,38,39,40,41,42,49,55,58,60,61,62,63,78,79,80,81,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,120,],[66,-11,-12,-13,-30,-31,-32,-71,-72,66,66,66,66,66,66,66,-73,-32,66,-74,66,66,-77,-78,-79,-80,-81,-82,66,66,66,66,66,66,-83,66,-36,]),'DOTSUB':([31,33,34,35,38,39,40,41,42,49,55,58,60,61,62,63,78,79,80,81,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,120,],[67,-11,-12,-13,-30,-31,-32,-71,-72,67,67,67,67,67,67,67,-73,-32,67,-74,67,67,-77,-78,-79,-80,-81,-82,67,67,67,67,67,67,-83,67,-36,]),'*':([31,33,34,35,38,39,40,41,42,49,55,58,60,61,62,63,78,79,80,81,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,120,],[68,-11,-12,-13,-30,-31,-32,-71,-72,68,68,68,68,68,68,68,-73,-32,68,-74,68,68,68,68,-79,-80,-81,-82,68,68,68,68,68,68,-83,68,-36,]),'/':([31,33,34,35,38,39,40,41,42,49,55,58,60,61,62,63,78,79,80,81,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,120,],[69,-11,-12,-13,-30,-31,-32,-71,-72,69,69,69,69,69,69,69,-73,-32,69,-74,69,69,69,69,-79,-80,-81,-82,69,69,69,69,69,69,-83,69,-36,]),'DOTMUL':([31,33,34,35,38,39,40,41,42,49,55,58,60,61,62,63,78,79,80,81,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,120,],[70,-11,-12,-13,-30,-31,-32,-71,-72,70,70,70,70,70,70,70,-73,-32,70,-74,70,70,70,70,70,70,-81,-82,70,70,70,70,70,70,-83,70,-36,]),'DOTDIV':([31,33,34,35,38,39,40,41,42,49,55,58,60,61,62,63,78,79,80,81,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,120,],[71,-11,-12,-13,-30,-31,-32,-71,-72,71,71,71,71,71,71,71,-73,-32,71,-74,71,71,71,71,71,71,-81,-82,71,71,71,71,71,71,-83,71,-36,]),'<':([31,33,34,35,38,39,40,41,42,55,78,79,81,94,95,96,97,98,99,100,101,108,120,],[72,-11,-12,-13,-30,-31,-32,-71,-72,72,-73,-32,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-36,]),'>':([31,33,34,35,38,39,40,41,42,55,78,79,81,94,95,96,97,98,99,100,101,108,120,],[73,-11,-12,-13,-30,-31,-32,-71,-72,73,-73,-32,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-36,]),'EQ':([31,33,34,35,38,39,40,41,42,55,78,79,81,94,95,96,97,98,99,100,101,108,120,],[74,-11,-12,-13,-30,-31,-32,-71,-72,74,-73,-32,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-36,]),'NEQ':([31,33,34,35,38,39,40,41,42,55,78,79,81,94,95,96,97,98,99,100,101,108,120,],[75,-11,-12,-13,-30,-31,-32,-71,-72,75,-73,-32,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-36,]),'GEQ':([31,33,34,35,38,39,40,41,42,55,78,79,81,94,95,96,97,98,99,100,101,108,120,],[76,-11,-12,-13,-30,-31,-32,-71,-72,76,-73,-32,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-36,]),'LEQ':([31,33,34,35,38,39,40,41,42,55,78,79,81,94,95,96,97,98,99,100,101,108,120,],[77,-11,-12,-13,-30,-31,-32,-71,-72,77,-73,-32,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-36,]),')':([32,33,34,35,38,39,40,41,42,54,78,79,80,81,84,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,120,148,],[-40,-11,-12,-13,-30,-31,-32,-71,-72,89,-73,-32,108,-74,111,-75,-76,-77,-78,-79,-80,-81,-82,-84,-85,-86,-87,-88,-89,-83,120,-36,150,]),',':([33,34,35,38,39,40,41,42,47,48,49,59,78,79,81,86,87,88,90,91,92,93,94,95,96,97,98,99,100,101,108,110,115,116,117,120,135,137,145,],[-11,-12,-13,-30,-31,-32,-71,-72,83,-16,-17,-61,-73,-32,-74,-35,113,-34,-61,119,-27,-29,-75,-76,-77,-78,-79,-80,-81,-82,-83,-18,136,-23,-25,-36,-22,-28,-24,]),']':([38,39,59,79,86,88,90,91,92,93,115,116,117,131,135,137,145,],[-30,-31,-61,-32,-35,-34,-61,118,-27,-29,135,-23,-25,143,-22,-28,-24,]),"'":([40,],[81,]),':':([86,88,112,],[-35,-34,130,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'m_expr':([0,2,7,],[1,21,23,]),'expression':([0,2,7,89,133,],[2,2,2,114,144,]),'c_block':([0,2,7,89,133,],[3,3,3,3,3,]),'base_expr':([0,2,7,89,111,123,133,139,142,150,153,],[4,4,4,4,124,124,4,124,124,124,124,]),'if_st':([0,2,7,89,133,],[5,5,5,5,5,]),'loop_st':([0,2,7,89,111,123,133,139,142,150,153,],[6,6,6,6,125,125,6,125,125,125,125,]),'assignment':([0,2,7,89,111,123,133,139,142,150,153,],[8,8,8,8,8,8,8,8,8,8,8,]),'return':([0,2,7,89,111,123,133,139,142,150,153,],[9,9,9,9,9,9,9,9,9,9,9,]),'print':([0,2,7,89,111,123,133,139,142,150,153,],[10,10,10,10,10,10,10,10,10,10,10,]),'while':([0,2,7,89,111,123,133,139,142,150,153,],[12,12,12,12,12,12,12,12,12,12,12,]),'for':([0,2,7,89,111,123,133,139,142,150,153,],[13,13,13,13,13,13,13,13,13,13,13,]),'assign_expr':([0,2,7,89,111,123,133,139,142,150,153,],[14,14,14,14,14,14,14,14,14,14,14,]),'range':([0,2,7,89,111,123,133,139,142,150,153,],[20,20,20,20,20,20,20,20,20,20,20,]),'condition':([15,24,50,141,],[30,54,84,148,]),'operation':([15,16,24,25,26,27,28,29,37,50,64,65,66,67,68,69,70,71,72,73,74,75,76,77,83,141,],[31,49,55,58,60,61,62,63,80,55,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,55,]),'compare':([15,24,50,141,],[32,32,32,32,]),'number':([15,16,24,25,26,27,28,29,36,37,50,64,65,66,67,68,69,70,71,72,73,74,75,76,77,82,83,90,136,141,],[33,33,33,33,33,33,33,33,78,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,109,33,116,145,33,]),'unary_operation':([15,16,24,25,26,27,28,29,37,50,64,65,66,67,68,69,70,71,72,73,74,75,76,77,83,141,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'function':([15,16,24,25,26,27,28,29,37,50,64,65,66,67,68,69,70,71,72,73,74,75,76,77,83,141,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'negation':([15,16,24,25,26,27,28,29,37,50,64,65,66,67,68,69,70,71,72,73,74,75,76,77,83,141,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'transpose':([15,16,24,25,26,27,28,29,37,50,64,65,66,67,68,69,70,71,72,73,74,75,76,77,83,141,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'function_n':([15,16,24,25,26,27,28,29,37,50,64,65,66,67,68,69,70,71,72,73,74,75,76,77,83,141,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'print_b':([16,],[47,]),'matrix':([25,],[56,]),'int_variable':([52,85,113,130,],[87,112,131,142,]),'matrix_b':([59,],[91,]),'array':([59,119,],[92,137,]),'eps':([59,90,114,151,],[93,117,134,154,]),'array_b':([90,],[115,]),'loop_b':([111,123,139,142,150,153,],[121,140,147,149,151,155,]),'loop_expr':([111,123,139,142,150,153,],[122,122,122,122,122,122,]),'if_loop_st':([111,123,139,142,150,153,],[126,126,126,126,126,126,]),'else_st':([114,],[132,]),'m_loop_expr':([123,],[139,]),'else_loop_st':([151,],[152,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> m_expr","S'",1,None,None,None),
  ('m_expr -> expression','m_expr',1,'p_m_expr','mparser.py',29),
  ('m_expr -> expression m_expr','m_expr',2,'p_m_expr','mparser.py',30),
  ('expression -> c_block','expression',1,'p_expression','mparser.py',33),
  ('expression -> base_expr','expression',1,'p_expression','mparser.py',34),
  ('expression -> base_expr ;','expression',2,'p_expression','mparser.py',35),
  ('expression -> if_st','expression',1,'p_expression','mparser.py',36),
  ('expression -> loop_st','expression',1,'p_expression','mparser.py',37),
  ('base_expr -> assignment','base_expr',1,'p_base_expr','mparser.py',40),
  ('base_expr -> return','base_expr',1,'p_base_expr','mparser.py',41),
  ('base_expr -> print','base_expr',1,'p_base_expr','mparser.py',42),
  ('operation -> number','operation',1,'p_operation','mparser.py',45),
  ('operation -> unary_operation','operation',1,'p_operation','mparser.py',46),
  ('operation -> function','operation',1,'p_operation','mparser.py',47),
  ('c_block -> { m_expr }','c_block',3,'p_c_block','mparser.py',50),
  ('print -> PRINT print_b','print',2,'p_PRINT','mparser.py',53),
  ('print_b -> STRING','print_b',1,'p_print_b','mparser.py',56),
  ('print_b -> operation','print_b',1,'p_print_b','mparser.py',57),
  ('print_b -> print_b , operation','print_b',3,'p_print_b','mparser.py',58),
  ('return -> RETURN condition','return',2,'p_RETURN','mparser.py',61),
  ('return -> RETURN operation','return',2,'p_RETURN','mparser.py',62),
  ('return -> RETURN','return',1,'p_RETURN','mparser.py',63),
  ('array -> [ array_b ]','array',3,'p_array','mparser.py',66),
  ('array_b -> number','array_b',1,'p_array_b','mparser.py',69),
  ('array_b -> array_b , number','array_b',3,'p_array_b','mparser.py',70),
  ('array_b -> eps','array_b',1,'p_array_b','mparser.py',71),
  ('matrix -> [ matrix_b ]','matrix',3,'p_matrix','mparser.py',73),
  ('matrix_b -> array','matrix_b',1,'p_matrix_b','mparser.py',76),
  ('matrix_b -> matrix_b , array','matrix_b',3,'p_matrix_b','mparser.py',77),
  ('matrix_b -> eps','matrix_b',1,'p_matrix_b','mparser.py',78),
  ('number -> INTNUM','number',1,'p_number','mparser.py',81),
  ('number -> FLOATNUM','number',1,'p_number','mparser.py',82),
  ('number -> ID','number',1,'p_number','mparser.py',83),
  ('range -> ID [ int_variable , int_variable ]','range',6,'p_range','mparser.py',86),
  ('int_variable -> INTNUM','int_variable',1,'p_int_variable','mparser.py',89),
  ('int_variable -> ID','int_variable',1,'p_int_variable','mparser.py',90),
  ('function -> function_n ( number )','function',4,'p_function','mparser.py',93),
  ('function_n -> ONES','function_n',1,'p_function_n','mparser.py',96),
  ('function_n -> EYE','function_n',1,'p_function_n','mparser.py',97),
  ('function_n -> ZEROS','function_n',1,'p_function_n','mparser.py',98),
  ('condition -> compare','condition',1,'p_condition','mparser.py',101),
  ('loop_st -> while','loop_st',1,'p_loop_st','mparser.py',104),
  ('loop_st -> for','loop_st',1,'p_loop_st','mparser.py',105),
  ('while -> WHILE ( condition ) loop_b','while',5,'p_while','mparser.py',108),
  ('for -> FOR ID = int_variable : int_variable loop_b','for',7,'p_for','mparser.py',111),
  ('loop_b -> loop_expr','loop_b',1,'p_loop_b','mparser.py',114),
  ('loop_b -> loop_expr ;','loop_b',2,'p_loop_b','mparser.py',115),
  ('loop_b -> { m_loop_expr }','loop_b',3,'p_loop_b','mparser.py',116),
  ('loop_expr -> base_expr','loop_expr',1,'p_loop_expr','mparser.py',119),
  ('loop_expr -> loop_st','loop_expr',1,'p_loop_expr','mparser.py',120),
  ('loop_expr -> if_loop_st','loop_expr',1,'p_loop_expr','mparser.py',121),
  ('loop_expr -> BREAK','loop_expr',1,'p_loop_expr','mparser.py',122),
  ('loop_expr -> CONTINUE','loop_expr',1,'p_loop_expr','mparser.py',123),
  ('m_loop_expr -> m_loop_expr loop_b','m_loop_expr',2,'p_m_loop_expr','mparser.py',126),
  ('m_loop_expr -> loop_b','m_loop_expr',1,'p_m_loop_expr','mparser.py',127),
  ('if_st -> IF ( condition ) expression else_st','if_st',6,'p_if_st','mparser.py',130),
  ('else_st -> ELSE expression','else_st',2,'p_else_st','mparser.py',133),
  ('else_st -> eps','else_st',1,'p_else_st','mparser.py',134),
  ('if_loop_st -> IF ( condition ) loop_b else_loop_st','if_loop_st',6,'p_if_loop_st','mparser.py',137),
  ('else_loop_st -> ELSE loop_b','else_loop_st',2,'p_else_loop_st','mparser.py',140),
  ('else_loop_st -> eps','else_loop_st',1,'p_else_loop_st','mparser.py',141),
  ('eps -> <empty>','eps',0,'p_eps','mparser.py',144),
  ('assign_expr -> ID','assign_expr',1,'p_assign_expr','mparser.py',147),
  ('assign_expr -> range','assign_expr',1,'p_assign_expr','mparser.py',148),
  ('assignment -> assign_expr = matrix','assignment',3,'p_assignment','mparser.py',151),
  ('assignment -> assign_expr = STRING','assignment',3,'p_assignment','mparser.py',152),
  ('assignment -> assign_expr = operation','assignment',3,'p_assignment','mparser.py',153),
  ('assignment -> assign_expr ASSIGNADD operation','assignment',3,'p_assignment','mparser.py',154),
  ('assignment -> assign_expr ASSIGNSUB operation','assignment',3,'p_assignment','mparser.py',155),
  ('assignment -> assign_expr ASSIGNMUL operation','assignment',3,'p_assignment','mparser.py',156),
  ('assignment -> assign_expr ASSIGNDIV operation','assignment',3,'p_assignment','mparser.py',157),
  ('unary_operation -> negation','unary_operation',1,'p_unary_operation','mparser.py',160),
  ('unary_operation -> transpose','unary_operation',1,'p_unary_operation','mparser.py',161),
  ('negation -> - number','negation',2,'p_negation','mparser.py',164),
  ("transpose -> ID '",'transpose',2,'p_transpose','mparser.py',167),
  ('operation -> operation + operation','operation',3,'p_operation_binary','mparser.py',170),
  ('operation -> operation - operation','operation',3,'p_operation_binary','mparser.py',171),
  ('operation -> operation DOTADD operation','operation',3,'p_operation_binary','mparser.py',172),
  ('operation -> operation DOTSUB operation','operation',3,'p_operation_binary','mparser.py',173),
  ('operation -> operation * operation','operation',3,'p_operation_binary','mparser.py',174),
  ('operation -> operation / operation','operation',3,'p_operation_binary','mparser.py',175),
  ('operation -> operation DOTMUL operation','operation',3,'p_operation_binary','mparser.py',176),
  ('operation -> operation DOTDIV operation','operation',3,'p_operation_binary','mparser.py',177),
  ('operation -> ( operation )','operation',3,'p_operation_binary','mparser.py',178),
  ('compare -> operation < operation','compare',3,'p_compare','mparser.py',181),
  ('compare -> operation > operation','compare',3,'p_compare','mparser.py',182),
  ('compare -> operation EQ operation','compare',3,'p_compare','mparser.py',183),
  ('compare -> operation NEQ operation','compare',3,'p_compare','mparser.py',184),
  ('compare -> operation GEQ operation','compare',3,'p_compare','mparser.py',185),
  ('compare -> operation LEQ operation','compare',3,'p_compare','mparser.py',186),
]
